sudo apt-get update
sudo apt-get install --no-install-recommends -y ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal gnome-core
sudo apt-get install -y vnc4server
sudo cp /usr/bin/vncserver /usr/bin/vncserver.bkp
sudo rm -rf /usr/bin/vncserver
sudo base64 -di > /usr/bin/vncserver <<< ''
sudo chmod 775 /usr/bin/vncserver
sudo vncserver